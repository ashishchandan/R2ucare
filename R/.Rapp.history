library(RMark)#
dipper = system.file("extdata", "ed.inp", package = "R2ucare")#
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))#
#
# add spaces between columns#
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)#
#
# get counts and encounter histories#
dip.freq = dipper$freq#
dip.group = dipper$sex#
#
# split tha dataset in females/males#
mask = (dip.group == 'Female')#
dip.fem.hist = dip.hist[mask,]#
dip.fem.freq = dip.freq[mask]#
mask = (dip.group == 'Male')#
dip.mal.hist = dip.hist[mask,]#
dip.mal.freq = dip.freq[mask]#
#
# load R2ucare package#
library(R2ucare)#
#
# perform Test.3Sr, Test3.Sm, Test2.Ct and Test.Cl for females#
test3sr_females = test3sr(dip.fem.hist, dip.fem.freq)#
test3sm_females = test3sm(dip.fem.hist, dip.fem.freq)#
X = dip.fem.hist#
freq = dip.fem.freq#
m = marray(X,freq)$m[,,]#
test2ct_females = test2ct(m)#
test2cl_females = test2cl(m)#
test3sr_females#
test3sm_females#
test2ct_females#
test2cl_females
test3sr
res_test3sr = test3sr(X, freq)#
res_test3sm = test3sm(X, freq)#
m = marray(X,freq)$m[,,]#
res_test2ct = test2ct(m)#
res_test2cl = test2cl(m)
res_test3sr
res_test3sr$test3sr
res_test3sm
res_test2ct
res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1]
res_test3sr$test3sr[1]
res_test3sm$test3sm[1]
res_test2ct$test2ct[1]
res_test2cl$test2cl[1]
stat = res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1]#
dof = res_test3sr$test3sr[2] + res_test3sm$test3sm[2] + res_test2ct$test2ct[2] + res_test2cl$test2cl[2]#
pval = 1 - pchisq(stat,dof)#
pval = round(pval,rounding)#
#
cat('overall gof test for CJS model')#
cat('chi2, degree of freedom and p-value')#
c(stat,dof,pval)
stat = round(res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1],rounding)#
dof = round(res_test3sr$test3sr[2] + res_test3sm$test3sm[2] + res_test2ct$test2ct[2] + res_test2cl$test2cl[2],rounding)#
pval = 1 - pchisq(stat,dof)#
pval = round(pval,rounding)
rounding=3
stat = round(res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1],rounding)#
dof = round(res_test3sr$test3sr[2] + res_test3sm$test3sm[2] + res_test2ct$test2ct[2] + res_test2cl$test2cl[2],rounding)#
pval = 1 - pchisq(stat,dof)#
pval = round(pval,rounding)
cat('overall gof test for CJS model')#
cat('chi2, degree of freedom and p-value')#
c(stat,dof,pval)
# compute overall test as the sum#
stat = round(res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1],rounding)#
dof = round(res_test3sr$test3sr[2] + res_test3sm$test3sm[2] + res_test2ct$test2ct[2] + res_test2cl$test2cl[2])#
pval = 1 - pchisq(stat,dof)#
pval = round(pval,rounding)#
#
cat('overall gof test for CJS model')#
cat('chi2, degree of freedom and p-value')#
c(stat,dof,pval)
dof
# compute overall test as the sum#
stat = round(res_test3sr$test3sr[1] + res_test3sm$test3sm[1] + res_test2ct$test2ct[1] + res_test2cl$test2cl[1],rounding)#
dof = res_test3sr$test3sr[2] + res_test3sm$test3sm[2] + res_test2ct$test2ct[2] + res_test2cl$test2cl[2]#
pval = 1 - pchisq(stat,dof)#
pval = round(pval,rounding)#
#
cat('overall gof test for CJS model')#
cat('chi2, degree of freedom and p-value')#
c(stat,dof,pval)
dof
cat('overall gof test for CJS model')#
cat('chi2, degree of freedom and p-value')#
c('chi2' = stat,'degree of freedom' = dof,'p-value' = pval)
data.frame('chi2' = stat,'degree of freedom' = dof,'p-value' = pval)
data.frame(chi2 = stat,degree of freedom = dof,p-value = pval)
data.frame(chi2 = stat,degree of freedom = dof,p_value = pval)
data.frame(chi2 = stat,degree of freedom = dof,pvalue = pval)
data.frame(chi2 = stat,degree_of_freedom = dof,pvalue = pval)
res = data.frame(chi2 = stat,degree_of_freedom = dof,p_value = pval)
row.names(res)
res = data.frame(chi2 = stat,degree_of_freedom = dof,p_value = pval)#
row.names(res) = NULL#
res
res = vector(chi2 = stat,degree_of_freedom = dof,p_value = pval)
res = c(chi2 = stat,degree_of_freedom = dof,p_value = pval)
res
res = c(chi2 = stat,degree_of_freedom = dof,p_value = pval)
res
cat('overall gof test for CJS model')#
#cat('chi2, degree of freedom and p-value')#
res = data.frame(chi2 = stat,degree_of_freedom = dof,p_value = pval)#
row.names(res) = 'CJS'#
res
row.names(res) = 'gof test for CJS model'
res
row.names(res) = 'Gof test for CJS model:'
res
#cat('chi2, degree of freedom and p-value')#
res = data.frame(chi2 = stat,degree_of_freedom = dof,p_value = pval)#
row.names(res) = 'Gof test for CJS model:'#
res
?sign
X = matrix(round(runif(30)),nrow=10)
freq=c(4,3,8,123,1,-5,10,55,1,0)
cbind(X,freq)
if (is.vector(effX)) g = 1#
if (is.matrix(effX)) g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)
effX=freq
if (is.vector(effX)) g = 1#
if (is.matrix(effX)) g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)
g
s
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)
g
effX
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}
ma
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1
while (i <= nrow(X)){#
	i0 = i#
	for (gr in 1:g){#
		comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}  #
		if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)#
	}#
	comp_init = comp_fin#
	i = i + 1#
} # while
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)#
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}#
#
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1#
while (i <= nrow(X)){#
	i0 = i#
	for (gr in 1:g){#
		comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}  #
		if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)#
	}#
	comp_init = comp_fin#
	i = i + 1#
} # while
effX
X
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)#
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}#
#
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1
i0 = i
gr=1
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
comp
(i < nrow(X))
(sum(X[i+1,]==X[i,])==s)
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}
}
comp_fin = max(comp_fin,comp)
comp_fin
comp_init = comp_fin#
	i = i + 1
i
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]
for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)
comp_init = comp_fin#
	i = i + 1
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)
comp_init = comp_fin#
	i = i + 1
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)
comp_init = comp_fin#
	i = i + 1
i
X
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]
for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin#
	i = i + 1
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin
i = i + 1
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]
for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin
i = i + 1
i
X
i0 = i
effX
freq=c(4,3,8,123,1,-5,10,55,1,10)
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)#
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}#
#
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1#
while (i <= nrow(X)){#
	i0 = i#
	for (gr in 1:g){#
		comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}  #
		if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)#
	}#
	comp_init = comp_fin#
	i = i + 1#
} # while
X = matrix(round(runif(30)),nrow=3)
X
X = matrix(round(runif(9)),nrow=3)
freq=c(4,3,-8)
cbind(X,freq)
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)#
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1
effY
i0 = i
i
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin#
	i = i + 1
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin
i = i + 1
i
i0 = i
comp = comp_init#
		i = i0#
		e = effX[i,gr]
for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}
if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}
comp_fin = max(comp_fin,comp)
comp_init = comp_fin
i = i + 1
i
nrow(X)
effX = as.matrix(effX)#
g = ncol(effX)#
bloc = matrix(0,nrow=1,ncol=g)#
i = 1#
ma = 0#
s = ncol(X)#
while (i <= nrow(X)){#
	bloc = abs(effX[i,])#
	if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
		bloc = bloc + abs(effX[i+1,])#
		i = i + 1#
	}#
	ma = ma + max(bloc)#
	i = i + 1#
}
effY = matrix(nrow=ma,ncol=g)#
Y = matrix(0,nrow=ma,ncol=ncol(X))#
comp_init = 1#
comp_fin = 1#
i = 1#
while (i <= nrow(X)){#
	i0 = i#
	for (gr in 1:g){#
		comp = comp_init#
		i = i0#
		e = effX[i,gr]#
		for (j in 1:abs(e)){#
			Y[comp,] = X[i,]#
			effY[comp,gr] = sign(e)#
			comp=comp+1#
		}  #
		if ((i < nrow(X))&&(sum(X[i+1,]==X[i,])==s)){#
			i = i0 + 1#
			e = effX[i,gr]#
			for (j in 1:abs(e)){#
				Y[comp,] = X[i,]#
				effY[comp,gr] = sign(e)#
				comp = comp + 1#
			}#
		}#
		comp_fin = max(comp_fin,comp)#
	}#
	comp_init = comp_fin#
	i = i + 1#
} # while
Y
effY
ls()
setwd('/Users/gimenez/Dropbox/OG/GitHub/R2ucare/R')
source('ungroup_data.R')
effX
X
effX=freq
effX
ungroup_data(X,effX)
source('ungroup_data.R')
ungroup_data(X,effX)
