#' geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
#' geese.freq = geese$freq
#'
#' # encounter histories and number of individuals with corresponding histories
#' X = geese.hist
#' freq = geese.freq
#'
#' # load R2ucare package
#' library(R2ucare)
#'
res_test3Gsr = test3Gsr(X, freq)
res_test3Gsm = test3Gsm(X, freq)
res_testMitec = testMitec(X, freq)
res_testMltec = testMltec(X, freq)
stat1 = round(res_test3Gsr$test3Gsr[1] + res_test3Gsm$test3Gsm[1] + res_testMitec$testMitec[1] + res_testMltec$testMltec[1],rounding)
rounding=3
stat1 = round(res_test3Gsr$test3Gsr[1] + res_test3Gsm$test3Gsm[1] + res_testMitec$testMitec[1] + res_testMltec$testMltec[1],rounding)
stat1
dof1 = res_test3Gsr$test3Gsr[2] + res_test3Gsm$test3Gsm[2] + res_testMitec$testMitec[2] + res_testMltec$testMltec[2]
dof1
# compute each component
res_test3Gsr = test3Gsr(X, freq)
res_test3Gsm = test3Gsm(X, freq)
res_testMitec = testMitec(X, freq)
res_testMltec = testMltec(X, freq)
res_test3Gwbwa = test3Gwbwa(X, freq)
# fit Arnason-Schwarz (AS) model and get the deviance and number of estimated parameters
# fit Jolly-Move (JMV) model and get the deviance and number of estimated parameters
# compute overall test (JMV first, then AS)
stat_jmv = round(res_test3Gsr$test3Gsr[1] + res_test3Gsm$test3Gsm[1] + res_test3Gwbwa$test3Gwbwa[1] + res_testMitec$testMitec[1] + res_testMltec$testMltec[1],rounding)
dof_jmv = res_test3Gsr$test3Gsr[2] + res_test3Gsm$test3Gsm[2] + res_test3Gwbwa$test3Gwbwa[2] + res_testMitec$testMitec[2] + res_testMltec$testMltec[2]
pval_jmv = round(1 - pchisq(stat_jmv,dof_jmv),rounding)
pval_jmv
dof_jmv
stat_jmv
library(R2ucare)
?overall_JMV
library(R2ucare)
?overall_JMV
library(R2ucare)
?overall_JMV
library(R2ucare)
?overall_JMV
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform overall gof test
overall_JMV(X, freq)
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform overall gof test
overall_JMV(X, freq)
?overall_CJS
# read in Dipper dataset
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
dip.freq = dipper$freq
dip.group = dipper$sex
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# for females
overall_CJS(dip.fem.hist, dip.fem.freq)
?marray
X
X2 = X
X2[X2>1]=1
X2
dip.mal.hist
dip.mal.hist.reversed = t(apply(dip.mal.hist,1,rev))
dip.mal.hist.reversed
geese.hist
geese.hist[geese.hist>1] = 1
geese.hist
library(R2ucare)
install.packages("Rcpp")
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# split tha dataset in females/males
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
X = dip.mal.hist
freq = dip.mal.freq
X
apply(X,1,sum)
apply(X,1,sum)>0
freq>0
X[(apply(X,1,sum)>0 & freq>0),]
mask = (apply(X,1,sum)>0 & freq>0) # drop empty histories, and histories with no individuals
X[mask,]
freq[mask]
freq
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
geese.hist
geese.hist
geese.hist==2
geese.hist[geese.hist==2]=3
geese.hist
mask = (apply(X,1,sum)>0 & freq>0) # drop empty histories, and histories with no individuals
mask
sum(mask)
X[,c(1,4)] # pick occasions 1 and 4
X[,c(1,4,6)] # pick occasions 1 and 4
X2 = X[,c(1,4,6)] # pick occasions 1, 4 and 6
mask = (apply(X2,1,sum)>0) # drop empty histories
sum(!mask) # how many histories were dropped?
X2[mask,]
freq[mask]
cbind(X2[mask,],freq[mask])
library(dplyr)
?ddply
ddply
library(plyr)
ddply
?ddply
X[,c(1,4,6)]
# read in the classical dipper dataset using package RMark
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# split tha dataset in females/males
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# load R2ucare package
library(R2ucare)
# perform Test.3Sr, Test3.Sm, Test2.Ct and Test.Cl for females
test3sr_females = test3sr(dip.fem.hist, dip.fem.freq)
test3sm_females = test3sm(dip.fem.hist, dip.fem.freq)
X = dip.fem.hist
freq = dip.fem.freq
m = marray(X,freq)$m[,,]
test2ct_females = test2ct(m)
test2cl_females = test2cl(m)
test3sr_females
test3sm_females
test2ct_females
test2cl_females
# or all tests at once:
overall_CJS(X,freq)
# perform Test.3Sr, Test3.Sm, Test2.Ct and Test.Cl for males
test3sr_males = test3sr(dip.mal.hist, dip.mal.freq)
test3sm_males = test3sm(dip.mal.hist, dip.mal.freq)
X = dip.mal.hist
freq = dip.mal.freq
X[,c(1,4,6)]
apply(X[,c(1,4,6)],1,max)
gather_146 = apply(X[,c(1,4,6)],1,max) # gather columns 1, 4 and 6 by taking the max
gather_146
X[,1] = gather_146 # replace occasion 1 by new occasion
X = X[,-c(4,6)] # drop occasions 4 and 6
X
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
fc <- NULL
for (i in 1:nrow(X)){
fc <- c(fc,min(which(X[i,]!=0)))
}
fc
cbind(X,fc)
X
i=1
X[i,]
min(which(X[i,]!=0))
for (i in 1:nrow(X)){
occasion_first_encounter = min(which(X[i,]!=0))
X[,occasion_first_encounter] = 0
}
warnings()
occasion_first_encounter
X
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
X
i=1
min(which(X[i,]!=0))
# Assuming the geese dataset has been read in R (see above):
for (i in 1:nrow(X)){
occasion_first_encounter = min(which(X[i,]!=0))
X[,occasion_first_encounter] = 0
}
which(X[i,]!=0
)
i
X[i,]
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
X
warnings()
X
occasion_first_encounter = rep(NA,nrow(X))
occasion_first_encounter
for (i in 1:nrow(X)){
occasion_first_encounter = min(which(X[i,]!=0))
#X[,occasion_first_encounter] = 0
}
occasion_first_encounter
# Assuming the geese dataset has been read in R (see above):
occasion_first_encounter = rep(NA,nrow(X))
for (i in 1:nrow(X)){
occasion_first_encounter[i] = min(which(X[i,]!=0))
#X[,occasion_first_encounter] = 0
}
occasion_first_encounter
X[,occasion_first_encounter]
X[,occasion_first_encounter]=0
X
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
i=1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=0
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
X[,occasion_first_encounter] = 0
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
X[,occasion_first_encounter] = 0
occasion_first_encounter
X[i,]
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
for (i in 1:nrow(X)){
occasion_first_encounter = min(which(X[i,]!=0)) # look for occasion of first encounter
X[i,occasion_first_encounter] = 0 # replace the first non zero by a zero
}
X
mask = (apply(X,1,sum)>0) # select non-empty histories
sum(!mask) # how many histories are to be dropped?
X[mask,] # drop these histories from dataset
freq[mask] # from counts
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# get female data
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
# load R2ucare package
library(R2ucare)
# perform Test.3Sr, Test3.Sm, Test2.Ct and Test.Cl for females
m = marray(dip.fem.hist,dip.fem.freq)$m[,,]
m
marray(dip.fem.hist,dip.fem.freq)
library(R2ucare)
?marray
# read in the classical dipper dataset using package RMark
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# get female data
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
# load R2ucare package
library(R2ucare)
# get number of released individuals (R), the m-array (m) and the number of individuals never seen again (never)
marray(dip.fem.hist,dip.fem.freq)
?multimarray
# read in the geese dataset using package RMark
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# build m-array
multimarray(X,freq)
# read in the geese dataset using package RMark
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# build m-array
multimarray(X,freq)
library(R2ucare)
?multimarray
X=round(runif(30),nrow=10)
X=matrix(round(runif(30)),nrow=10)
X
X=matrix(round(runif(30)),nrow=10)
X=matrix(round(runif(300)),nrow=10)
X
X=matrix(round(runif(300)),nrow=100)
X
freq=rep(1,100)
cbind(X,freq)
group_data(X,freq)
library(R2ucare)
?group_data
library(R2ucare)
?vignette
vignette(package = "R2ucare")
vignette('vignette_R2ucare')
devtools::install(build_vignettes = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
library(R2ucare)
vignette('vignette_R2ucare')
vignette(package = "R2ucare")
library(R2ucare)
devtools::build_vignettes()
devtools::build_vignettes()
library(R2ucare)
