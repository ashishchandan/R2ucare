i = 0
for (j in it3){ # scan occasions of capture 2:K-1
i = i+1
result[i,1] = j
before = before + X[,j-1] # nr of captures before j
after = after - X[,j] # nr of captures after j
select = X[,j] & (after>0) # individuals recaptured at least once after j
ind = which(select) # rows of these individuals
nj = length(ind)
rest = (j+1):K # remaining occasions
restmj = 1:(K-j)
df = 0
drapeau = 0
U = rep(0,4)
if (nj > 0){
newORold = matrix(0,nrow=nj,ncol=2)
if (length(rest)==1){ when = matrix(X[ind,rest],nrow=length(X[ind,rest]))}
if (length(ind)==1){ when = matrix(X[ind,rest],ncol=length(X[ind,rest]))}
if ((length(rest)!=1)&(length(ind)!=1)) {when = as.matrix(X[ind,rest])} # later recaptures of those captured in j
deja = rep(0,nj)
# restrict to next recaptured
for (ii in 1:nj){
for (jj in restmj){
deja[ii] = deja[ii] + when[ii,jj] # number of reobservations
if (deja[ii]>1) when[ii,jj] = 0 # if already seen again, neglect observation
} # loop on jj (remaining occasions)
} # loop on ii (selected individuals)
# end calculation of next recapture
effj = freq[ind] # works if eff is a columnn
aeffj = abs(effj) # handles negative numbers (if seen again after j)
newORold[,1] = (before[ind]>0)*aeffj # numbers of old by rh (nj x 2)
newORold[,2] = (before[ind]==0)*aeffj # numbers of new by rh
cont_tab = t(newORold) %*% when # (2 x nj by nj x K-j i.e. 2 by K-j
cont_tab = pool2K(cont_tab,2) # pool if needed
ML = apply(cont_tab,2,sum)
MC = apply(cont_tab,1,sum)
# calculate df
if (any(as.logical(cont_tab))){ # non empty table
df = (sum(ML>0)-1)*(sum(MC>0)-1) # takes account of empty rows and columns
} else {
df=0 # empty table
}
# end of df calculation
if (df>0) {
U = ind_test_rc(cont_tab,2)
} else {
U = c(0,0,0,'None')
}
} # if (nj > 0)
result[i,2] = U[1] # stat chi-square (also if Fisher performed)
result[i,3] = U[3] # degree of freedom
result[i,4] = U[2] # p-value of chi-square/Fisher
result[i,5] = U[4] # chi-square/Fisher
} # for (j in it3)
devtools::build_vignettes()
library(R2ucare)
devtools::build_vignettes()
library(R2ucare)
X
eff
freq
test3sm(dip.hist, dip.freq)
dipper = system.file("extdata", "wolf.inp", package = "R2ucare")
dipper = read_inp(dipper)
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
test3sm(dip.hist, dip.freq)
devtools::build_vignettes()
library(R2ucare)
library(R2jags)
# Load data
#setwd("D:/Sarah Bears 2016 data/Bayesian Approach")
#setwd("/Users/sarahcubaynes/Documents/POSTDOC BEARS/bayesien approach")
data <- read.table("CHfem2016.dat",sep=" ")
head(data)
data <- data[-c(8,18),]
N <- dim(data)[1]
data <- read.table("/Users/gimenez/Desktop/RE_RE___E___ransients/CHfem2016.dat",sep=" ")
head(data)
data <- data[-c(8,18),]
N <- dim(data)[1]
Years <- dim(data)[2]
N
Years
# Perform GOF tests
library(R2ucare)
eff <- rep(1,N)
dataCJS = data
dataCJS[dataCJS>1] = 1
test3sr(dataCJS,eff) #signif
test3sm(dataCJS,eff) #non signif
m = marray(dataCJS,eff)$m[,,]
m
test2ct(m) #non signif
test2cl(m) #signif
overall_CJS(dataCJS,eff)
test3Gsr(data,eff)
verbose=T
rounding=3
X=data
X
dim(X)
freq=eff
freq
k = ncol(X)
res = group_data(X,freq)
his = res[,1:k]
eff = res[,k+1]
his
eff
nh = nrow(his)
a = max(his)
kplusun = k + 1
a
table_multi_3sr = data.frame(occasion = rep(NA,a*(k-2)),site = rep(NA,a*(k-2)),stat = rep(NA,a*(k-2)), df = rep(NA,a*(k-2)), p_val = rep(NA,a*(k-2)), test_perf = rep(FALSE,a*(k-2)))
where_in_table_3sr = 0
#nsitereel=sum(filtre);
i=2
l=1
where_in_table_3sr = where_in_table_3sr + 1
#if filtre(l)
fisheroupas=0
masque = (his[,i]==l)
batch = his[masque,] # select encounter histories containing l in column i
batch
length(batch)
if (length(batch)==0){ # if no release at date i on site l, no test
table_multi_3sr[where_in_table_3sr,1] = i
table_multi_3sr[where_in_table_3sr,2] = l
table_multi_3sr[where_in_table_3sr,3] = 0
table_multi_3sr[where_in_table_3sr,4] = 0
table_multi_3sr[where_in_table_3sr,5] = 0
table_multi_3sr[where_in_table_3sr,6] = 'None'
next
}
batcheff = eff[masque] # select counts corresponding to encounter histories with l in column i
res = group_data_gen(batch,batcheff,(i+1):k) # sort according to columns i+1,...,k
batchpost = res[,1:ncol(res)-1]
batcheffpost = res[,ncol(res)]
i
eante = rep(1,nrow(batchpost))
eante
k
epost = rep(1,nrow(batchpost))
epost
j = 0
ind = (k-i)*a+1
table = matrix(0,nrow=a+1,ncol=ind)
cpt = matrix(0,nrow=a+1,ncol=1)
while (j<nrow(batchpost)){ # go through encounter histories
j=j+1
date = epost[j]
site = batchpost[j,i+date]
if (site==0){
col = ind # never seen again
} else{
col = (date-1)*a+site # seen again at date and site
}
if (j==1){
cold = col
} else if (col!=cold){
table[,cold] = cpt
cpt = matrix(0,nrow=a+1,ncol=1)
cold = col
}
tempo = batchpost[j,eante[j]] + 1 # site of previous obs + 1
if (site==0){
cpt[tempo] = cpt[tempo] + batcheffpost[j] * (batcheffpost[j]>0)
} else {
cpt[tempo]=cpt[tempo]+abs(batcheffpost[j])
}
}
table[,cold] = cpt #
table
compo3GSSR = cbind(apply(table[,1:ncol(table)-1],1,sum),table[,ncol(table)])
# ===================================================
# test3G SR (sub-batch, releases)
# ===================================================
compo3GSR=rbind(compo3GSSR[1,],apply(compo3GSSR[2:(2+a-1),],2,sum))
#if verbosity>=3
#    strtable=[ strtable {strcat('component test3G SR (transients), occasion: ',num2str(i),' site: ',num2str(l)) }];
#    strtable=[ strtable {'----------------- | Seen again - Never seen again' }];
#    strtable=[ strtable {strcat('---- Newly Marked | ',num2str(compo3GSR(1,:))) }];
#    strtable=[ strtable {strcat('Previously Marked | ',num2str(compo3GSR(2,:))) }];
#end
fisher3GSR = 0
if (any(expval_table(compo3GSR)<2)){
fisher3GSR = 1
}
#
# calcul des tests pour  3G_SR
fisher3GSR
fish = fisher.test(compo3GSR)
pvalfish = fish$p.value
dffish = (nrow(compo3GSR)-1)*(ncol(compo3GSR)-1)
stafish = qchisq(1-pvalfish, dffish)
table_multi_3sr[where_in_table_3sr,1] = i
table_multi_3sr[where_in_table_3sr,2] = l
table_multi_3sr[where_in_table_3sr,3] = stafish
table_multi_3sr[where_in_table_3sr,4] = dffish
table_multi_3sr[where_in_table_3sr,5] = pvalfish
table_multi_3sr[where_in_table_3sr,6] = 'Fisher'
} else {
stat = sum(as.numeric(table_multi_3sr[,3]))
stat = round(stat,rounding)
dof = sum(as.numeric(table_multi_3sr[,4]))
pval = 1 - pchisq(stat,dof)
pval = round(pval,rounding)
# if user specifies all outputs
if (verbose==TRUE) return(list(test3Gsr=c(stat=stat,df=dof,p_val=pval),details=table_multi_3sr))
# otherwise
if (verbose==FALSE) return(list(test3Gsr=c(stat=stat,df=dof,p_val=pval)))
}
test3Gsr(data,eff)
data
eff
eff <- rep(1,N)
eff
test3Gsr(data,eff)
test3Gsr(data,eff)
test3Gsm(data,eff)
test3Gwbwa(data,eff)
testMitec(data,eff)
testMltec(data,eff)
X=data
freq=eff
freq
k = ncol(X)
his = X
a = max(his)
# initialization
table_multi_mitec = data.frame(occasion = rep(NA,k-3),stat = rep(NA,k-3), df = rep(NA,k-3), p_val = rep(NA,k-3), test_perf = rep(FALSE,k-3))
marray = multimarray(X,freq)
X
eff
n = dim(X)[1] # nb of encounter histories
s = max(X) # nb of sites
k = dim(X)[2]
km1 = k - 1 # nb of recapture occasions
effx = matrix(freq)
g = ncol(effx)
#get.first <- function(x) min(which(x!=0))
#e = apply(X, 1, get.first) # beginning of encounter histories in e
#f = e
#for (i in 1:nh) f[i] = chmatx[e[i],i] # site of initial release
R = matrix(0,nrow=s,ncol=km1)
m = array(0,dim=c(s,s,km1,km1))
rprime = R
# loop on encounter histories
for (i in 1:n){
h = X[i,] # pick up history in row i
e = effx[i,] # get number of individuals with this ch in the g groups
ae = abs(e) # absolute value of numbers
dates = which(h>0) # occasions of capture
ncap = length(dates) # find number of captures
if (ncap>0){ # more than 1 capture
if (ncap>1){
dlast = dates[1:(ncap-1)]
dnext = dates[2:ncap]
sd = h[dlast]
sa = h[dnext]
dnext = dnext-1
for (j in 1:(ncap-1)){
R[sd[j],dlast[j]] = R[sd[j],dlast[j]] + ae
m[sd[j],sa[j],dlast[j],dnext[j]] = m[sd[j],sa[j],dlast[j],dnext[j]] + ae
}
} # if (ncap>1)
dl = dates[ncap]
sdl = h[dl]
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5*(e+ae)
} # if (ncap>0)
} # for (i in 1:n)
n = dim(X)[1] # nb of encounter histories
s = max(X) # nb of sites
k = dim(X)[2]
km1 = k - 1 # nb of recapture occasions
effx = matrix(freq)
g = ncol(effx)
#get.first <- function(x) min(which(x!=0))
#e = apply(X, 1, get.first) # beginning of encounter histories in e
#f = e
#for (i in 1:nh) f[i] = chmatx[e[i],i] # site of initial release
R = matrix(0,nrow=s,ncol=km1)
m = array(0,dim=c(s,s,km1,km1))
rprime = R
i=1
h = X[i,] # pick up history in row i
e = effx[i,] # get number of individuals with this ch in the g groups
ae = abs(e) # absolute value of numbers
dates = which(h>0) # occasions of capture
ncap = length(dates) # find number of captures
ncap
dl = dates[ncap]
sdl = h[dl]
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5*(e+ae)
dl
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5 * (e + ae)
k
sdl
dl
R[sdl,dl]
R[3,7]
R[sdl,7]
R[3,dl]
str(dl)
str(sdl)
unlist(sdl)
dl = dates[ncap]
sdl = unlist(h[dl])
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5 * (e + ae)
library(R2ucare)
# Load data
#setwd("D:/Sarah Bears 2016 data/Bayesian Approach")
#setwd("/Users/sarahcubaynes/Documents/POSTDOC BEARS/bayesien approach")
data <- read.table("/Users/gimenez/Desktop/RE_RE___E___ransients/CHfem2016.dat",sep=" ")
head(data)
data <- data[-c(8,18),]
N <- dim(data)[1]
Years <- dim(data)[2]
N
Years
# Perform GOF tests
library(R2ucare)
eff <- rep(1,N)
dataCJS = data
dataCJS[dataCJS>1] = 1
test3sr(dataCJS,eff) #signif
test3sm(dataCJS,eff) #non signif
m = marray(dataCJS,eff)$m[,,]
test2ct(m) #non signif
test2cl(m) #signif
overall_CJS(dataCJS,eff)
test3Gsr(data,eff)
testMitec(data,eff)
testMltec(data,eff)
X=data
freq=eff
n = dim(X)[1] # nb of encounter histories
s = max(X) # nb of sites
k = dim(X)[2]
km1 = k - 1 # nb of recapture occasions
effx = matrix(freq)
g = ncol(effx)
#get.first <- function(x) min(which(x!=0))
#e = apply(X, 1, get.first) # beginning of encounter histories in e
#f = e
#for (i in 1:nh) f[i] = chmatx[e[i],i] # site of initial release
R = matrix(0,nrow=s,ncol=km1)
m = array(0,dim=c(s,s,km1,km1))
rprime = R
i=1
h = X[i,] # pick up history in row i
e = effx[i,] # get number of individuals with this ch in the g groups
ae = abs(e) # absolute value of numbers
dates = which(h>0) # occasions of capture
ncap = length(dates) # find number of captures
ncap
dl = dates[ncap]
sdl = unlist(h[dl])
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5 * (e + ae)
k = ncol(X)
his = X
a = max(his)
# initialization
table_multi_mitec = data.frame(occasion = rep(NA,k-3),stat = rep(NA,k-3), df = rep(NA,k-3), p_val = rep(NA,k-3), test_perf = rep(FALSE,k-3))
marray = multimarray(X,freq)
marray = multimarray(X,freq)
library(R2ucare)
marray = multimarray(X,freq)
marray
testMitec(data,eff)
testMltec(data,eff)
test3Gsr(data,eff)
X=data
freq=eff
freq
k = ncol(X)
his = X
a = max(his)
# initialization
table_multi_mitec = data.frame(occasion = rep(NA,k-3),stat = rep(NA,k-3), df = rep(NA,k-3), p_val = rep(NA,k-3), test_perf = rep(FALSE,k-3))
marray = multimarray(X,freq)
debutligne = 1
finligne = seq(a,a*k,by=a)
debutcolonne = seq(1,a*(k-1),by=a)
fincolonne = a * (k-1)
marray
dim(marray)
datat = marray[,2:(ncol(marray)-1)] # extrait du m-array avec les revus, sans les relaches ni les jamais revus
i=2
mixandbases = datat[debutligne:finligne[i],debutcolonne[i]:fincolonne]
for (j in 1:(i-2)){
if ((i-2)<1) break
mixandbases[1:a,] = mixandbases[1:a,] + mixandbases[(a+1):(2*a),]
mixandbases = mixandbases[-((a+1):(2*a)),]
}
for (j in 1:((ncol(mixandbases)-a)/a-1)){
if (((ncol(mixandbases)-a)/a-1)<1) break
mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
mixandbases
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
apply(tabtemp,1,sum)
mixandbases = pooling_mixtures(nk,nj,a,mixandbases)
mixandbases
indic_mixbasis = c(matrix(0,nrow=nrow(mixandbases)-nj,ncol=1),rep(1,nj)) # indique 1 ou 0 suivant que base ou melange
data = cbind(mixandbases,indic_mixbasis)
#if verbosity>=3
#    strtable=[ strtable {strcat('occasion :',num2str(i))} ];
#    taille=size(data,2);
#    strtable=[ strtable {'--------------- Seen again - Seen again later '} ];
#    for kk=1:size(data,1)
#        if data(kk,taille)==0
#            strtable=[ strtable {strcat('When last released | ',num2str(data(kk,1:taille-1))) }];
#        else
#            strtable=[ strtable {strcat('Currently released | ',num2str(data(kk,1:taille-1))) }];
#        end
#    end
#end
nk = nrow(data)
r = ncol(data)
ni = r - 1
data = t(data)
nature = data[r,] # il s'agit de indic_mixanbasis'
data = data[-r,] # on la supprime !!!
tri = which(nature!=0) # coordonnees des bases
nj = length(tri) # nombre de bases
tri = c(tri,which(nature==0)) # ajout des coordonnees des melanges
M = data[,tri] # on renumerote bases et melanges
totk = apply(M,2,sum) # effectif des colonnes
CoorMelVide = which(totk[(nj+1):nk]==0)
if (!(length(CoorMelVide)==0)) M = M[,-CoorMelVide]
nk = ncol(M)
totk = apply(M,2,sum) # actualisation des effectifs des colonnes
# Si aucune base n'est vide & si melanges
if (nj!=nk){
# NEW definition des bases
Np = t(M[,1:nj])
# definition des melanges
Mp = t(M[,(nj+1):nk])
# calcul des coefficients du melanges
res = coef_mixtures(Mp,Np)
Q = res$P
P = res$PI
A = res$GAM
Q = rbind(P,Q)
# calcul des valeurs attendues
theoriques = matrix(rep(totk,ni),byrow=T,nrow=ni) * t(Q)
# calcul du nombre de degres de liberte
df = (nk-nj)*(ni-nj)
# test LR
tempchi2 = gof_test(1,c(M),c(theoriques))
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = tempchi2
table_multi_mitec[i-1,3] = df
table_multi_mitec[i-1,4] = 1-pchisq(tempchi2,df)
table_multi_mitec[i-1,5] = 'Chi-square'
} else {
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
}
}
# compute overall test:
stat = sum(as.numeric(table_multi_mitec[,2]))
table_multi_mitec
k
i=3
mixandbases = datat[debutligne:finligne[i],debutcolonne[i]:fincolonne]
mixandbases
for (j in 1:(i-2)){
if ((i-2)<1) break
mixandbases[1:a,] = mixandbases[1:a,] + mixandbases[(a+1):(2*a),]
mixandbases = mixandbases[-((a+1):(2*a)),]
}
for (j in 1:((ncol(mixandbases)-a)/a-1)){
if (((ncol(mixandbases)-a)/a-1)<1) break
mixandbases[,(a+1):(2*a)] = mixandbases[,(a+1):(2*a)] + mixandbases[,(2*a+1):(3*a)]
mixandbases = mixandbases[,-((2*a+1):(3*a))]
}
nk = nrow(mixandbases)
tabtemp = mixandbases[(nk-a+1):nk,]
#tabtemp = tabtemp[filtre,] # les bases filtrees
mixandbases = rbind(mixandbases[1:(nk-a),],tabtemp)
nj = nrow(tabtemp)
nk = nrow(mixandbases)
mixandbases
if (any(apply(tabtemp,1,sum)==0) | (nj==0)){
table_multi_mitec[i-1,1] = i
table_multi_mitec[i-1,2] = 0
table_multi_mitec[i-1,3] = 0
table_multi_mitec[i-1,4] = 0
table_multi_mitec[i-1,5] = 'None'
break
}
install.packages("revealjs", type = "source")
