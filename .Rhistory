m[sd[j],sa[j],dlast[j],dnext[j],gg] = m[sd[j],sa[j],dlast[j],dnext[j],gg] + ae[gg]
}
}
} # if (ncap>1)
dl = dates[ncap]
sdl = h[dl]
if (dl<k){
for (gg in 1:g){
R[sdl,dl,gg] = R[sdl,dl,gg] + 0.5*(e[gg]+ae[gg])
}
}
} # if (ncap>0)
} # for (i in 1:n)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# for females
X = geese.hist
freq = geese.freq
n = dim(X)[1] # nb of encounter histories
s = max(X) # nb of sites
k = dim(X)[2]
km1 = k - 1 # nb of recapture occasions
effx = matrix(freq)
g = ncol(effx)
#get.first <- function(x) min(which(x!=0))
#e = apply(X, 1, get.first) # beginning of encounter histories in e
#f = e
#for (i in 1:nh) f[i] = chmatx[e[i],i] # site of initial release
R = matrix(0,nrow=s,ncol=km1)
m = array(0,dim=c(s,s,km1,km1))
rprime = R
# loop on encounter histories
for (i in 1:n){
h = X[i,] # pick up history in row i
e = effx[i,] # get number of individuals with this ch in the g groups
ae = abs(e) # absolute value of numbers
dates = which(h>0) # occasions of capture
ncap = length(dates) # find number of captures
if (ncap>0){ # more than 1 capture
if (ncap>1){
dlast = dates[1:(ncap-1)]
dnext = dates[2:ncap]
sd = h[dlast]
sa = h[dnext]
dnext = dnext-1
for (j in 1:(ncap-1)){
R[sd[j],dlast[j]] = R[sd[j],dlast[j]] + ae
m[sd[j],sa[j],dlast[j],dnext[j]] = m[sd[j],sa[j],dlast[j],dnext[j]] + ae
}
} # if (ncap>1)
dl = dates[ncap]
sdl = h[dl]
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5*(e+ae)
} # if (ncap>0)
} # for (i in 1:n)
R
v = m
for (ns in 1:s){
for (d in 1:km1){
v = m[ns,,d,] # sum over strata of arrival and occasions
rprime[ns,d] = rprime[ns,d] + sum(sum(v))
}
}
rprime
never = R - rprime
never
m
interm = NULL
for (datedep in 1:km1){
for (sitedep in 1:s){
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):(km1+1)]
line = c(rep(0,nzeros),tempo)
rprime2 = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime2)
}
}
interm = NULL
for (datedep in 1:km1){
for (sitedep in 1:s){
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):km1]
line = c(rep(0,nzeros),tempo)
rprime2 = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime2)
}
}
marray = matrix(interm,nrow=km1*s,byrow=T)
interm
length(interm)
168/6
never
R
R[]
R[,]
c(R)
rprime
never = c(never)
never
m
interm = NULL
for (datedep in 1:km1){
for (sitedep in 1:s){
if (km1<(datedep+1)) break
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):km1]
line = c(rep(0,nzeros),tempo)
rprime = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime)
}
}
interm
marray = matrix(interm,nrow=km1*s,byrow=T)
R
interm = NULL
for (datedep in 1:km1){
if (km1<(datedep+1)) break
for (sitedep in 1:s){
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):km1]
line = c(rep(0,nzeros),tempo)
rprime = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime)
}
}
interm
interm = NULL
for (datedep in 1:km1){
for (sitedep in 1:s){
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):km1]
line = c(rep(0,nzeros),tempo)
rprime = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime)
}
}
interm = NULL
for (datedep in 1:km1){
if (km1<(datedep+1)) next
for (sitedep in 1:s){
nzeros = (datedep-1)*s
tempo = m[sitedep,,datedep,(datedep+1):km1]
line = c(rep(0,nzeros),tempo)
rprime = sum(line)
interm = c(interm,R[sitedep,datedep],line,rprime)
}
}
interm
m
dim(m)
?array
i=1
marray = NULL
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
marray
marray = NULL
for (i in 1:km1){
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
}
marray
marray = matrix(marray,nrow=s*km1,ncol=s*km1,byrow=T)
marray
marray = NULL
for (i in 1:km1){
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
}
marray = matrix(marray,nrow=s*km1,ncol=s*km1,byrow=F)
marray
marray = NULL
for (i in 1:km1){
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
}
marray
ncol(marray)
seq(1,ncol(marray),by=s*km1)
seq(15,ncol(marray),by=s*km1)
marray = NULL
for (i in 1:km1){
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
}
deb = seq(1,ncol(marray),by=s*km1)
fin = seq(15,ncol(marray),by=s*km1)
marray2 = NULL
for (j in 1:km1){
marray2 = rbind(marray2,marray[,deb[j]:fin[j]])
}
marray2
marray = cbind(released,marray2,never)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# for females
X = geese.hist
freq = geese.freq
n = dim(X)[1] # nb of encounter histories
s = max(X) # nb of sites
k = dim(X)[2]
km1 = k - 1 # nb of recapture occasions
effx = matrix(freq)
g = ncol(effx)
#get.first <- function(x) min(which(x!=0))
#e = apply(X, 1, get.first) # beginning of encounter histories in e
#f = e
#for (i in 1:nh) f[i] = chmatx[e[i],i] # site of initial release
R = matrix(0,nrow=s,ncol=km1)
m = array(0,dim=c(s,s,km1,km1))
rprime = R
# loop on encounter histories
for (i in 1:n){
h = X[i,] # pick up history in row i
e = effx[i,] # get number of individuals with this ch in the g groups
ae = abs(e) # absolute value of numbers
dates = which(h>0) # occasions of capture
ncap = length(dates) # find number of captures
if (ncap>0){ # more than 1 capture
if (ncap>1){
dlast = dates[1:(ncap-1)]
dnext = dates[2:ncap]
sd = h[dlast]
sa = h[dnext]
dnext = dnext-1
for (j in 1:(ncap-1)){
R[sd[j],dlast[j]] = R[sd[j],dlast[j]] + ae
m[sd[j],sa[j],dlast[j],dnext[j]] = m[sd[j],sa[j],dlast[j],dnext[j]] + ae
}
} # if (ncap>1)
dl = dates[ncap]
sdl = h[dl]
if (dl<k) R[sdl,dl] = R[sdl,dl] + 0.5*(e+ae)
} # if (ncap>0)
} # for (i in 1:n)
v = m
for (ns in 1:s){
for (d in 1:km1){
v = m[ns,,d,] # sum over strata of arrival and occasions
rprime[ns,d] = rprime[ns,d] + sum(sum(v))
}
}
never = R - rprime
# format output
released = c(R)
never = c(never)
marray = NULL
for (i in 1:km1){
for (j in 1:km1){
marray = cbind(marray,m[,,i,j])
}
}
deb = seq(1,ncol(marray),by=s*km1)
fin = seq(15,ncol(marray),by=s*km1)
marray2 = NULL
for (j in 1:km1){
marray2 = rbind(marray2,marray[,deb[j]:fin[j]])
}
marray = cbind(released,marray2,never)
marray
source('multimarray')
setwd('/Users/gimenez/Dropbox/OG/GitHub/R2ucare/R')
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# for females
X = geese.hist
freq = geese.freq
source('multimarray')
source('multimarray.R')
multimarray
multimarray(X,freq)
library(R2ucare)
?multimarray
library(R2ucare)
library(tm)
library(gdata)
library(stm)
(base_monde <- Corpus(DirSource("/Users/gimenez/Dropbox/OG/BOULOT/ENCADREMENT/Marie CHANDELIER/stm_loup/analyses_finales/MONDE_thematique_principale",encoding="utf-8"),readerControl = list(reader=readPlain, language = "fr",  load = TRUE)))
#names(base_monde)
#lapply(base_monde, as.character)
(base_nice <- Corpus(DirSource("/Users/gimenez/Dropbox/OG/BOULOT/ENCADREMENT/Marie CHANDELIER/stm_loup/analyses_finales/NICE_thematique_principale",encoding="UTF-8"), readerControl = list(reader=readPlain, language = "fr",  load = TRUE)))
#names(base_nice)
#lapply(base_nice, as.character)
load('stm_marie.RData')
install.packages("stmBrowser")
stmBrowser()
library(stmBrowser)
stmBrowser()
?stmBrowser
library(stm)
data(poliblog5k)
#Create date
dec312007 <- as.numeric(as.Date("2007-12-31"))
poliblog5k.meta$date <- as.Date(dec312007+poliblog5k.meta$day,
origin="1970-01-01")
out <- prepDocuments(poliblog5k.docs, poliblog5k.voc, poliblog5k.meta)
stm.out <- stm(out$documents, out$vocab, K=10,
prevalence=~rating + date,
data=out$meta,
max.em.its=1) #generally run models
#longer than this.
library(stmBrowser)
setwd(tempdir())
stmBrowser(stm.out, data=out$meta, c("rating", "date"),
text="text")
library(tm)
library(gdata)
library(stm)
(base_monde <- Corpus(DirSource("/Users/gimenez/Dropbox/OG/BOULOT/ENCADREMENT/Marie CHANDELIER/stm_loup/analyses_finales/MONDE_thematique_principale",encoding="utf-8"),readerControl = list(reader=readPlain, language = "fr",  load = TRUE)))
#names(base_monde)
#lapply(base_monde, as.character)
dat_monde <- read.xls("metada_principale_monde_fonction_ratio.xlsx",header=T)
dim(dat_monde)
# supprime les 3 dernieres lignes qui sont bizarres
dat_monde <- dat_monde[-c(121,122,123),]
# on vire les modalités bizarres, puis on convertit année en numérique
dat_monde$annee = factor(dat_monde$annee)
dat_monde$annee = as.numeric(levels(dat_monde$annee))[dat_monde$annee] # astuce trouvée http://tinyurl.com/hfsqtze
metadata <- data.frame(year= dat_monde$annee,title=rep('LeMonde',120))
meta(base_monde,tag=c("year","title")) <- metadata
#meta(base_monde)
#base_monde
test3Gsr(X,freq)
library(R2ucare)
warnings()
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
X
freq
test3Gsr(X,freq)
test3Gsr(X,freq)
library(R2ucare)
test3Gsr(X,freq)
test3Gsr
?test3sr
library(R2ucare)
test3Gsr
deviance_mixture
library(R2ucare)
deviance_mixture
library(R2ucare)
deviance_mixture
library(R2ucare)
deviance_mixture
library(R2ucare)
deviance_mixture
gof_test.R
gof_test
gof_test()
devtools::load_all(".")
warnings()
library(R2ucare)
pooling
pooling_ct
group_data
marray
ind_test_rc
expval_table
library(R2ucare)
expval_table
library(R2ucare)
deviance_mixture
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
coef_mixtures
devtools::load_all(".")
library(R2ucare)
library(R2ucare)
expval_table
RES
source('~/Dropbox/OG/GitHub/R2ucare/R/expval_table.R')
detach("package:R2ucare", unload=TRUE)
library("R2ucare", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
deviance_mixture
library(R2ucare)
library(devtools)
library(R2ucare)
devtools::load_all("~/Dropbox/OG/GitHub/R2ucare")
coef_mixtures()
library(R2ucare)
library(R2ucare)
ind_test_22()
coef_mixtures()
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform Test.3.GSm
test3Gsm(X,freq)
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform Test.3.GSR
test3Gsr(X,freq)
library(R2ucare)
library(R2ucare)
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform Test.3GWBWA
test3Gwbwa(X,freq)
library(R2ucare)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform TestM.ITEC
testMitec(X,freq)
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# perform TestM.LTEC
testMltec(X,freq)
library(R2ucare)
library(R2ucare)
