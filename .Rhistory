occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
i=0
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
X[,occasion_first_encounter] = 0
i=i+1
occasion_first_encounter = min(which(X[i,]!=0))
occasion_first_encounter
X[,occasion_first_encounter] = 0
occasion_first_encounter
X[i,]
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
for (i in 1:nrow(X)){
occasion_first_encounter = min(which(X[i,]!=0)) # look for occasion of first encounter
X[i,occasion_first_encounter] = 0 # replace the first non zero by a zero
}
X
mask = (apply(X,1,sum)>0) # select non-empty histories
sum(!mask) # how many histories are to be dropped?
X[mask,] # drop these histories from dataset
freq[mask] # from counts
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# get female data
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
# load R2ucare package
library(R2ucare)
# perform Test.3Sr, Test3.Sm, Test2.Ct and Test.Cl for females
m = marray(dip.fem.hist,dip.fem.freq)$m[,,]
m
marray(dip.fem.hist,dip.fem.freq)
library(R2ucare)
?marray
# read in the classical dipper dataset using package RMark
library(RMark)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = convert.inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# add spaces between columns
dip.hist = matrix(as.numeric(unlist(strsplit(dipper$ch, ''))),nrow=nrow(dipper),byrow=T)
# get counts and encounter histories
dip.freq = dipper$freq
dip.group = dipper$sex
# get female data
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
# load R2ucare package
library(R2ucare)
# get number of released individuals (R), the m-array (m) and the number of individuals never seen again (never)
marray(dip.fem.hist,dip.fem.freq)
?multimarray
# read in the geese dataset using package RMark
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# build m-array
multimarray(X,freq)
# read in the geese dataset using package RMark
library(RMark)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = convert.inp(geese)
# add spaces between columns
geese.hist = matrix(as.numeric(unlist(strsplit(geese$ch, ''))),nrow=nrow(geese),byrow=T)
geese.freq = geese$freq
# encounter histories and number of individuals with corresponding histories
X = geese.hist
freq = geese.freq
# load R2ucare package
library(R2ucare)
# build m-array
multimarray(X,freq)
library(R2ucare)
?multimarray
X=round(runif(30),nrow=10)
X=matrix(round(runif(30)),nrow=10)
X
X=matrix(round(runif(30)),nrow=10)
X=matrix(round(runif(300)),nrow=10)
X
X=matrix(round(runif(300)),nrow=100)
X
freq=rep(1,100)
cbind(X,freq)
group_data(X,freq)
library(R2ucare)
?group_data
library(R2ucare)
?vignette
vignette(package = "R2ucare")
vignette('vignette_R2ucare')
devtools::install(build_vignettes = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
library(R2ucare)
vignette('vignette_R2ucare')
vignette(package = "R2ucare")
library(R2ucare)
devtools::build_vignettes()
devtools::build_vignettes()
library(R2ucare)
library(R2ucare)
?read_headed
---
dipper = system.file("extdata", "ed.txt", package = "R2ucare")
dipper
read_headed(dipper)
library(R2ucare)
library(R2ucare)
dipper
read_headed(dipper)
devtools::use_package("stringr","RMark")
?use_package
devtools::use_package("stringr","RMark",type = "Depends")
devtools::use_package("stringr",type = "Depends")
devtools::use_package("stringr",type = "Imports")
devtools::use_package("stringr",type = "Imports")
stringr::fun()
stringr::str_count()
library(R2ucare)
read_headed(dipper)
library(stringr)
read_headed(dipper)
library(R2ucare)
library(R2ucare)
library(RMark)
library(stringr)
?read_inp
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
dipper
dip.freq = dipper$sample_size
dip.group = dipper$groups
dip.group
dip.freq
names(dipper)
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
test3sr_females = test3sr(dip.fem.hist, dip.fem.freq)
test3sm_females = test3sm(dip.fem.hist, dip.fem.freq)
# we need the m-array to perform test2ct and test2cl
m = marray(dip.fem.hist,dip.fem.freq)$m[,,]
test2ct_females = test2ct(m)
test2cl_females = test2cl(m)
# display results:
test3sr_females
test3sm_females
test2ct_females
test2cl_females
overall_CJS(dip.fem.hist, dip.fem.freq)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = read.inp(geese)
geese = read_inp(geese)
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
dip.fem.freq
library(R2ucare)
library(RMark)
library(stringr)
?install_github
library("devtools")
?install_github
library("devtools")
install_github('oliviergimenez/R2ucare',dependencies = TRUE,build_vignettes = TRUE)
install_github('oliviergimenez/R2ucare',dependencies = TRUE,build_vignettes = TRUE)
library(R2ucare)
if(!require(devtools)) install.packages("devtools")
library("devtools")
install_github('oliviergimenez/R2ucare',dependencies = TRUE,build_vignettes =
TRUE)
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
library(R2ucare)
library(RMark)
library(stringr)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
test3sr_females = test3sr(dip.fem.hist, dip.fem.freq)
test3sm_females = test3sm(dip.fem.hist, dip.fem.freq)
# we need the m-array to perform test2ct and test2cl
m = marray(dip.fem.hist,dip.fem.freq)$m[,,]
test2ct_females = test2ct(m)
test2cl_females = test2cl(m)
# display results:
test3sr_females
test3sm_females
test2ct_females
test2cl_females
overall_CJS(dip.fem.hist, dip.fem.freq)
geese = system.file("extdata", "geese.inp", package = "R2ucare")
geese = read_inp(geese)
geese.hist = geese$encounter_histories
geese.freq = geese$sample_size
test3Gsr(geese.hist,geese.freq)
test3Gsm(geese.hist,geese.freq)
test3Gwbwa(geese.hist,geese.freq)
testMitec(geese.hist,geese.freq)
testMltec(geese.hist,geese.freq)
overall_JMV(geese.hist,geese.freq)
geese.hist[geese.hist>1] = 1
geese.hist
geese.hist[geese.hist==3]=2 # all 3s become 2s
geese.hist
t(apply(dip.fem.hist,1,rev))
mask = (apply(dip.fem.hist,1,sum)>0 & dip.fem.freq>0) # select non-empty histories, and histories with at least one individual
sum(!mask) # how many histories are to be dropped?
dip.fem.hist[mask,] # drop these histories from dataset
dip.fem.freq[mask] # from counts
dip.fem.hist[,c(1,4,6)] # pick occasions 1, 4 and 6 (might be a good idea to clean the resulting dataset)
dip.fem.hist[,1] = gather_146 # replace occasion 1 by new occasion
gather_146 = apply(dip.fem.hist[,c(1,4,6)],1,max) # gather occasions 1, 4 and 6 by taking the max
dip.fem.hist[,1] = gather_146 # replace occasion 1 by new occasion
dip.fem.hist = dip.fem.hist[,-c(4,6)] # drop occasions 4 and 6
for (i in 1:nrow(geese.hist)){
occasion_first_encounter = min(which(geese.hist[i,]!=0)) # look for occasion of first encounter
geese.hist[i,occasion_first_encounter] = 0 # replace the first non zero by a zero
}
# delete empty histories from the new dataset
mask = (apply(geese.hist,1,sum)>0) # select non-empty histories
sum(!mask) # how many histories are to be dropped?
geese.hist[mask,] # drop these histories from dataset
geese.freq[mask] # from counts
if(!require(devtools)) install.packages("devtools")
devtools::build_vignettes()
devtools::build_vignettes()
library(R2ucare)
read.inp
?read.inp
?read_inp
```
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
geese = system.file("extdata", "geese.inp", package = "R2ucare")
read_inp(geese)
vignette(vignette_R2ucare)
vignette('vignette_R2ucare')
devtools::build_vignettes()
library(R2ucare)
?read_headed
devtools::build_vignettes()
library(R2ucare)
devtools::build_vignettes()
devtools::build_vignettes()
?install_github
devtools::build_vignettes()
devtools::build_vignettes()
library(RMark)
library(stringr)
devtools::build_vignettes()
library(R2ucare)
devtools::build_vignettes()
library(RMark)
library(stringr)
devtools::build_vignettes()
library(R2ucare)
library(stringr)
library(RMark)
devtools::build_vignettes()
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
library(R2ucare)
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
library(R2ucare)
library(R2ucare)
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
library(R2ucare)
res.males = test3sr(dip.mal.hist, dip.mal.freq)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# Test3SR for males
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
rounding
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# Test3SR for males
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
library(R2ucare)
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# Test3SR for males
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
res.males$details$signed_test
as.numeric(res.males$details$signed_test)
sum(as.numeric(res.males$details$signed_test))
sum(as.numeric(res.males$details$signed_test))/length(res.males$details$signed_test)
sqrt(sum(as.numeric(res.males$details$signed_test)))/length(res.males$details$signed_test)
sum(as.numeric(res.males$details$signed_test))/length(res.males$details$signed_test)
sum(as.numeric(res.males$details$signed_test))/sqrt(length(res.males$details$signed_test))
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# Test3SR for males
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
library(R2ucare)
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# Test3SR for males
res.males = test3sr(dip.mal.hist, dip.mal.freq)
res.males
library(R2ucare)
?test2ct
# read in the classical dipper dataset
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# for females
X = dip.fem.hist
freq = dip.fem.freq
res.fem = marray(X,freq)
m = res.fem$m[,,] # marray returns an array
res.females = test2ct(m)
res.females
?overall_CJS
dipper = system.file("extdata", "ed.inp", package = "R2ucare")
dipper = read_inp(dipper,group.df=data.frame(sex=c('Male','Female')))
# Get encounter histories, counts and groups:
dip.hist = dipper$encounter_histories
dip.freq = dipper$sample_size
dip.group = dipper$groups
# split the dataset in males/females
mask = (dip.group == 'Female')
dip.fem.hist = dip.hist[mask,]
dip.fem.freq = dip.freq[mask]
mask = (dip.group == 'Male')
dip.mal.hist = dip.hist[mask,]
dip.mal.freq = dip.freq[mask]
# for females
overall_CJS(dip.fem.hist, dip.fem.freq)
devtools::build_vignettes()
library(R2ucare)
